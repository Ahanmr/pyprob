# automatically generated by the FlatBuffers compiler, do not modify

# namespace: protocol

import flatbuffers

class UniformContinuousAlt(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsUniformContinuousAlt(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = UniformContinuousAlt()
        x.Init(buf, n + offset)
        return x

    # UniformContinuousAlt
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # UniformContinuousAlt
    def PriorMin(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # UniformContinuousAlt
    def PriorMax(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # UniformContinuousAlt
    def ProposalMeans(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .NDArray import NDArray
            obj = NDArray()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # UniformContinuousAlt
    def ProposalStds(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .NDArray import NDArray
            obj = NDArray()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # UniformContinuousAlt
    def ProposalCoeffs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .NDArray import NDArray
            obj = NDArray()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def UniformContinuousAltStart(builder): builder.StartObject(5)
def UniformContinuousAltAddPriorMin(builder, priorMin): builder.PrependFloat64Slot(0, priorMin, 0.0)
def UniformContinuousAltAddPriorMax(builder, priorMax): builder.PrependFloat64Slot(1, priorMax, 0.0)
def UniformContinuousAltAddProposalMeans(builder, proposalMeans): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(proposalMeans), 0)
def UniformContinuousAltAddProposalStds(builder, proposalStds): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(proposalStds), 0)
def UniformContinuousAltAddProposalCoeffs(builder, proposalCoeffs): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(proposalCoeffs), 0)
def UniformContinuousAltEnd(builder): return builder.EndObject()
