# automatically generated by the FlatBuffers compiler, do not modify

# namespace: flatbuffers

import flatbuffers

class UniformDiscreteProposal(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsUniformDiscreteProposal(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = UniformDiscreteProposal()
        x.Init(buf, n + offset)
        return x

    # UniformDiscreteProposal
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # UniformDiscreteProposal
    def Min(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UniformDiscreteProposal
    def Max(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # UniformDiscreteProposal
    def Probabilities(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .NDArray import NDArray
            obj = NDArray()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def UniformDiscreteProposalStart(builder): builder.StartObject(3)
def UniformDiscreteProposalAddMin(builder, min): builder.PrependInt32Slot(0, min, 0)
def UniformDiscreteProposalAddMax(builder, max): builder.PrependInt32Slot(1, max, 0)
def UniformDiscreteProposalAddProbabilities(builder, probabilities): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(probabilities), 0)
def UniformDiscreteProposalEnd(builder): return builder.EndObject()
